From 926dec8486646a2524f9dd7974a6bceaa482d13f Mon Sep 17 00:00:00 2001
From: Alf21 <4lf-mueller@gmx.de>
Date: Tue, 22 Aug 2017 21:04:18 +0200
Subject: [PATCH] Update 0.1f - added ClickableTextdraw Component - added new
 Light dialog style - some improvements - added a button to select a specific
 color for the ColorPicker

---
 pom.xml                                            |   2 +-
 .../alf21/textdrawsystem/Container/Container.java  |  16 +-
 src/main/java/me/alf21/textdrawsystem/TODO         |   2 +
 .../me/alf21/textdrawsystem/TextdrawSystem.java    |  14 ++
 .../textdrawsystem/calculations/Calculation.java   |   2 +
 .../textdrawsystem/colorPicker/ColorPicker.java    |  56 ++++++-
 .../content/components/button/Button.java          |  55 ++++---
 .../clickableTextdraw/ClickableTextdraw.java       | 129 +++++++++++++++
 .../ClickableTextdrawHandler.java                  |   9 ++
 .../content/components/input/Input.java            |   4 +-
 .../dialogs/styles/DialogStyles.java               |   4 +-
 .../textdrawsystem/dialogs/styles/light/Light.java | 179 +++++++++++++++++++++
 .../dialogs/styles/light/LightProcess.java         | 141 ++++++++++++++++
 .../dialogs/styles/normal/NormalProcess.java       |   4 +-
 .../alf21/textdrawsystem/dialogs/types/Panel.java  |   4 +
 .../panelDialog/AbstractPanelDialog.java           |   9 +-
 .../me/alf21/textdrawsystem/player/PlayerData.java |   4 +-
 .../alf21/textdrawsystem/player/PlayerManager.java |  13 +-
 .../utils/PlayerTextdrawContainer.java             |  58 +++++++
 .../utils/PlayersTextdrawContainer.java            |  58 +++++++
 20 files changed, 722 insertions(+), 41 deletions(-)
 create mode 100644 src/main/java/me/alf21/textdrawsystem/content/components/clickableTextdraw/ClickableTextdraw.java
 create mode 100644 src/main/java/me/alf21/textdrawsystem/content/components/clickableTextdraw/ClickableTextdrawHandler.java
 create mode 100644 src/main/java/me/alf21/textdrawsystem/dialogs/styles/light/Light.java
 create mode 100644 src/main/java/me/alf21/textdrawsystem/dialogs/styles/light/LightProcess.java
 create mode 100644 src/main/java/me/alf21/textdrawsystem/utils/PlayerTextdrawContainer.java
 create mode 100644 src/main/java/me/alf21/textdrawsystem/utils/PlayersTextdrawContainer.java

diff --git a/pom.xml b/pom.xml
index 2a770f7..d455136 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
 
   <groupId>me.alf21</groupId>
   <artifactId>textdraw-system</artifactId>
-  <version>0.1-SNAPSHOT</version>
+  <version>0.4-SNAPSHOT</version>
   <packaging>jar</packaging>
 
     <properties>
diff --git a/src/main/java/me/alf21/textdrawsystem/Container/Container.java b/src/main/java/me/alf21/textdrawsystem/Container/Container.java
index f98b2ea..4948b16 100644
--- a/src/main/java/me/alf21/textdrawsystem/Container/Container.java
+++ b/src/main/java/me/alf21/textdrawsystem/Container/Container.java
@@ -6,6 +6,7 @@ import me.alf21.textdrawsystem.content.components.ComponentData;
 import me.alf21.textdrawsystem.content.components.bar.Bar;
 import me.alf21.textdrawsystem.content.components.bar.BarInterface;
 import me.alf21.textdrawsystem.content.components.button.Button;
+import me.alf21.textdrawsystem.content.components.clickableTextdraw.ClickableTextdraw;
 import me.alf21.textdrawsystem.content.components.input.Input;
 import me.alf21.textdrawsystem.content.components.input.InputType;
 import me.alf21.textdrawsystem.content.components.list.List;
@@ -94,13 +95,13 @@ public class Container implements Destroyable {
 
 	public ArrayList<PlayerTextdraw> getAllPlayerTextdraws() {
 		ArrayList<PlayerTextdraw> playerTextdraws = new ArrayList<>();
-		components.forEach(comp -> comp.getAllPlayerTextdraws().forEach(playerTextdraws::add));
+		components.forEach(comp -> playerTextdraws.addAll(comp.getAllPlayerTextdraws()));
 		return playerTextdraws;
 	}
 
 	public ArrayList<PlayerTextdraw> getComponentTextdraws() {
 		ArrayList<PlayerTextdraw> playerTextdraws = new ArrayList<>();
-		components.forEach(component -> component.getComponentTextdraws().forEach(playerTextdraws::add));
+		components.forEach(component -> playerTextdraws.addAll(component.getComponentTextdraws()));
 		return playerTextdraws;
 	}
 
@@ -119,6 +120,11 @@ public class Container implements Destroyable {
 			components.add(bar);
 	}
 
+	public void addClickableTextdraw(ClickableTextdraw clickableTextdraw) {
+		if (!components.contains(clickableTextdraw))
+			components.add(clickableTextdraw);
+	}
+
 	public void addButton(Button button) {
 		if (!components.contains(button))
 			components.add(button);
@@ -166,6 +172,12 @@ public class Container implements Destroyable {
 		return bar;
 	}
 
+	public ClickableTextdraw createClickableTextdraw(float x, float y, float width, float height, Color color, String name) {
+		ClickableTextdraw clickableTextdraw = ClickableTextdraw.create(this, x, y, width, height, color, name);
+		getComponents().add(clickableTextdraw);
+		return clickableTextdraw;
+	}
+
 	public Button createButton(float x, float y, String text, String name) {
 		Button button = Button.create(this, x, y, text, name);
 		getComponents().add(button);
diff --git a/src/main/java/me/alf21/textdrawsystem/TODO b/src/main/java/me/alf21/textdrawsystem/TODO
index 1f31701..68fd0de 100644
--- a/src/main/java/me/alf21/textdrawsystem/TODO
+++ b/src/main/java/me/alf21/textdrawsystem/TODO
@@ -5,3 +5,5 @@ modify
     break or trim too long texts for boxes (only visible, not invisible)
         OR
     size the box up
+
+    TODO if is not needed a InputDialog (bcus of desc): Enter input without InputDialog direct into the input
diff --git a/src/main/java/me/alf21/textdrawsystem/TextdrawSystem.java b/src/main/java/me/alf21/textdrawsystem/TextdrawSystem.java
index 4cf3a6a..658ce6a 100644
--- a/src/main/java/me/alf21/textdrawsystem/TextdrawSystem.java
+++ b/src/main/java/me/alf21/textdrawsystem/TextdrawSystem.java
@@ -8,12 +8,15 @@
 
 package me.alf21.textdrawsystem;
 
+import me.alf21.textdrawsystem.dialogs.styles.DialogStyles;
 import me.alf21.textdrawsystem.dialogs.types.Panel;
 import me.alf21.textdrawsystem.panelDialog.PanelDialog;
 import me.alf21.textdrawsystem.player.PlayerData;
 import me.alf21.textdrawsystem.player.PlayerManager;
 import me.alf21.textdrawsystem.utils.PlayerTextdraw;
 import me.alf21.textdrawsystem.utils.PlayersTextdraw;
+import net.gtaun.shoebill.common.dialog.DialogHandler;
+import net.gtaun.shoebill.common.dialog.InputDialog;
 import net.gtaun.shoebill.common.player.PlayerLifecycleHolder;
 import net.gtaun.shoebill.data.Color;
 import net.gtaun.shoebill.object.Player;
@@ -139,4 +142,15 @@ public class TextdrawSystem extends Plugin {
 		}
 		return false;
 	}
+
+	public static InputDialog createInputDialog(Player player, String caption, String message, DialogHandler cancelHandler, InputDialog.ClickOkHandler okHandler) {
+		InputDialog inputDialog = InputDialog.create(player, TextdrawSystem.getInstance().getEventManager())
+				.caption(caption)
+				.message(message)
+				.onClickOk(okHandler)
+				.onClickCancel(cancelHandler)
+				.build();
+		inputDialog.show();
+		return inputDialog;
+	}
 }
diff --git a/src/main/java/me/alf21/textdrawsystem/calculations/Calculation.java b/src/main/java/me/alf21/textdrawsystem/calculations/Calculation.java
index 537c060..24d484e 100644
--- a/src/main/java/me/alf21/textdrawsystem/calculations/Calculation.java
+++ b/src/main/java/me/alf21/textdrawsystem/calculations/Calculation.java
@@ -16,6 +16,8 @@ import java.util.regex.Pattern;
  */
 public class Calculation {
 
+	// TODO fix heightToLetterHeight and vv Calculation
+
 	public static float letterHeightToHeight(float letterHeight) {
 		return letterHeight * 8.7f;
 	} //8.63
diff --git a/src/main/java/me/alf21/textdrawsystem/colorPicker/ColorPicker.java b/src/main/java/me/alf21/textdrawsystem/colorPicker/ColorPicker.java
index 119bc37..b17a3f2 100644
--- a/src/main/java/me/alf21/textdrawsystem/colorPicker/ColorPicker.java
+++ b/src/main/java/me/alf21/textdrawsystem/colorPicker/ColorPicker.java
@@ -5,7 +5,9 @@ import me.alf21.textdrawsystem.calculations.Calculation;
 import me.alf21.textdrawsystem.container.Container;
 import me.alf21.textdrawsystem.content.components.Component;
 import me.alf21.textdrawsystem.content.components.button.Button;
+import me.alf21.textdrawsystem.content.components.clickableTextdraw.ClickableTextdraw;
 import me.alf21.textdrawsystem.utils.PlayerTextdraw;
+import net.gtaun.shoebill.common.dialog.InputDialog;
 import net.gtaun.shoebill.constant.TextDrawAlign;
 import net.gtaun.shoebill.constant.TextDrawFont;
 import net.gtaun.shoebill.data.Color;
@@ -21,6 +23,9 @@ public class ColorPicker extends Container {
 
 	private Player player;
 	private PickedColorHandler pickedColorHandler;
+	private int alpha;
+	private Color color;
+	private boolean isShowed;
 
 	private PlayerTextdraw titleTextdraw;
 	private PlayerTextdraw leftBackgroundTextdraw, rightBackgroundTextdraw;
@@ -28,6 +33,7 @@ public class ColorPicker extends Container {
 	public ColorPicker(Player player) {
 		super(TextdrawSystem.getPanel(player), "ColorPicker");
 		this.player = player;
+		this.alpha = 255;
 		createColorPicker();
 	}
 
@@ -51,14 +57,15 @@ public class ColorPicker extends Container {
 		Color[] color = {
 				Color.DARKBLUE,
 				Color.BLUE,
+				Color.VIOLET,
 				Color.PURPLE,
 				Color.PINK,
+				Color.TEAL,
 				Color.RED,
 				Color.ORANGE,
 				Color.YELLOW,
 				Color.YELLOWGREEN,
 				Color.GREEN,
-				Color.TEAL,
 				Color.BROWN,
 				Color.GRAY,
 				Color.WHITE
@@ -75,11 +82,34 @@ public class ColorPicker extends Container {
 			button.toggleActivationEffect(false);
 			this.addButton(button);
 		}
+		Button button = Button.create(this, startX, startY + paddingY * color.length, width, "+", "Bar_Button_" + color.length);
+		button.getButtonTextdraw().setTextSize(button.getButtonTextdraw().getTextSize().getX(), button.getButtonTextdraw().getTextSize().getY() + 2);
+		button.getButtonTextdraw().setBoxColor(new Color(0, 0, 0, 150));
+		button.setClickHandler(handler -> {
+			InputDialog.ClickOkHandler clickOkHandler = (inputDialog, s) -> {
+				try {
+					int a = Integer.parseInt(s);
+					if (a >= 1 && a <= 255)
+						setAlpha(a);
+					else if (a == 0) {
+						this.hide();
+						this.destroy();
+						onPickColor(new Color(this.color.getR(), this.color.getG(), this.color.getB(), a));
+					}
+				} catch (Exception ignored) {
+
+				}
+			};
+			TextdrawSystem.createInputDialog(player, "Alpha (Opacity)", "Please enter a value between 0 and 255.\n[INFO] Enter '0' to choose select a completely transparent color.", null, clickOkHandler);
+		});
+		button.toggleActivationEffect(false);
+		this.addButton(button);
 
 		createColorContent(color[0]);
 	}
 
 	private void clearColorContent() {
+		isShowed = false;
 		ArrayList<Component> tmp = new ArrayList<>();
 		getComponents().forEach(component -> {
 			if (component.getName().contains("Content_Button_"))
@@ -93,6 +123,7 @@ public class ColorPicker extends Container {
 	}
 
 	private void showColorContent() {
+		isShowed = true;
 		getComponents().forEach(component -> {
 			if (component.getName().contains("Content_Button_"))
 				component.show();
@@ -100,6 +131,8 @@ public class ColorPicker extends Container {
 	}
 
 	private void createColorContent(Color color) {
+		this.color = color;
+
 		float startX = 85.0f, startY = 120.0f;
 		float leftWidth = Calculation.getWidth(leftBackgroundTextdraw);
 		float leftHeight = Calculation.getBoxHeight(leftBackgroundTextdraw);
@@ -112,7 +145,6 @@ public class ColorPicker extends Container {
 		int maxY = (int)( leftHeight / (defaultHeight + paddingY) ) + 1;
 
 		int maxColors = maxX * maxY;
-		int a = 255; //TODO ask for alpha later
 
 		//create horizontal colors
 		int bx, by = 0;
@@ -142,14 +174,14 @@ public class ColorPicker extends Container {
 					b = color.getB();
 				}
 				else {
-					Color tmp2 = new Color(255 - color.getR(), 255 - color.getG(), 255 - color.getB(), a);
+					Color tmp2 = new Color(255 - color.getR(), 255 - color.getG(), 255 - color.getB(), alpha);
 					r = color.getR() + (int) ( (double) tmp2.getR() / factor * (double) ( currentColorValue - (int) factor) );
 					g = color.getG() + (int) ( (double) tmp2.getG() / factor * (double) ( currentColorValue - (int) factor) );
 					b = color.getB() + (int) ( (double) tmp2.getB() / factor * (double) ( currentColorValue - (int) factor) );
 				}
 				//System.out.println("(" + r + ", " + g + ", " + b + "): bx-by: " + bx + "-" + by + "; CCV: " + currentColorValue + " (MaxColors: " + maxColors + ") -> maxX: " + maxX); //TODO sometimes it wont be reach (255, 255, 255) but (255, 254, 255), ...
-				Color tmp = new Color(r, g, b, a);
-				button.getButtonTextdraw().setBoxColor(tmp);
+				Color tmp = new Color(r, g, b, alpha);
+				button.setDeactivationBgColor(tmp);
 				button.setClickHandler(handler -> onPickColor(tmp));
 				button.toggleActivationEffect(false);
 				this.addButton(button);
@@ -206,6 +238,7 @@ public class ColorPicker extends Container {
 	public void onPickColor(Color color) {
 		if (pickedColorHandler != null)
 			pickedColorHandler.handle(this, color);
+		this.hide();
 		this.destroy();
 	}
 
@@ -265,4 +298,17 @@ public class ColorPicker extends Container {
 	public PlayerTextdraw getRightBackgroundTextdraw() {
 		return rightBackgroundTextdraw;
 	}
+
+	public int getAlpha() {
+		return alpha;
+	}
+
+	public void setAlpha(int alpha) {
+		this.alpha = alpha;
+		if (isShowed) {
+			clearColorContent();
+			createColorContent(color);
+			showColorContent();
+		}
+	}
 }
diff --git a/src/main/java/me/alf21/textdrawsystem/content/components/button/Button.java b/src/main/java/me/alf21/textdrawsystem/content/components/button/Button.java
index 0aad2b5..7cb2bd8 100644
--- a/src/main/java/me/alf21/textdrawsystem/content/components/button/Button.java
+++ b/src/main/java/me/alf21/textdrawsystem/content/components/button/Button.java
@@ -1,7 +1,7 @@
 package me.alf21.textdrawsystem.content.components.button;
 
-import me.alf21.textdrawsystem.container.Container;
 import me.alf21.textdrawsystem.TextdrawSystem;
+import me.alf21.textdrawsystem.container.Container;
 import me.alf21.textdrawsystem.content.components.Component;
 import me.alf21.textdrawsystem.content.components.ComponentAlignment;
 import me.alf21.textdrawsystem.content.components.ComponentData;
@@ -16,6 +16,7 @@ import java.util.ArrayList;
 /**
  * Created by Alf21 on 14.07.2016 in the project 'textdraw-system'.
  */
+// TODO use ClickableTextdraw as BaseComponent and extend it...
 public class Button extends Component {
 	private PlayerTextdraw playerTextdraw;
 	private ButtonHandler clickHandler;
@@ -198,12 +199,15 @@ public class Button extends Component {
 	}
 
 	public void setActivationColor(Color activationColor) {
-		boolean showed = playerTextdraw.isShowed();
-		if (showed)
-			playerTextdraw.hide();
 		this.activationColor = activationColor;
-		if (showed)
-			playerTextdraw.show();
+		if (isActivated()) {
+			boolean showed = playerTextdraw.isShowed();
+			if (showed)
+				playerTextdraw.hide();
+			playerTextdraw.setColor(activationColor);
+			if (showed)
+				playerTextdraw.show();
+		}
 	}
 
 	public Color getDeactivationColor() {
@@ -211,12 +215,15 @@ public class Button extends Component {
 	}
 
 	public void setDeactivationColor(Color deactivationColor) {
-		boolean showed = playerTextdraw.isShowed();
-		if (showed)
-			playerTextdraw.hide();
 		this.deactivationColor = deactivationColor;
-		if (showed)
-			playerTextdraw.show();
+		if (!isActivated()) {
+			boolean showed = playerTextdraw.isShowed();
+			if (showed)
+				playerTextdraw.hide();
+			playerTextdraw.setColor(deactivationColor);
+			if (showed)
+				playerTextdraw.show();
+		}
 	}
 
 	public Color getDeactivationBgColor() {
@@ -224,12 +231,15 @@ public class Button extends Component {
 	}
 
 	public void setDeactivationBgColor(Color deactivationBgColor) {
-		boolean showed = playerTextdraw.isShowed();
-		if (showed)
-			playerTextdraw.hide();
 		this.deactivationBgColor = deactivationBgColor;
-		if (showed)
-			playerTextdraw.show();
+		if (!isActivated()) {
+			boolean showed = playerTextdraw.isShowed();
+			if (showed)
+				playerTextdraw.hide();
+			playerTextdraw.setBoxColor(deactivationBgColor);
+			if (showed)
+				playerTextdraw.show();
+		}
 	}
 
 	public Color getActivationBgColor() {
@@ -237,11 +247,14 @@ public class Button extends Component {
 	}
 
 	public void setActivationBgColor(Color activationBgColor) {
-		boolean showed = playerTextdraw.isShowed();
-		if (showed)
-			playerTextdraw.hide();
 		this.activationBgColor = activationBgColor;
-		if (showed)
-			playerTextdraw.show();
+		if (isActivated()) {
+			boolean showed = playerTextdraw.isShowed();
+			if (showed)
+				playerTextdraw.hide();
+			playerTextdraw.setBoxColor(activationBgColor);
+			if (showed)
+				playerTextdraw.show();
+		}
 	}
 }
diff --git a/src/main/java/me/alf21/textdrawsystem/content/components/clickableTextdraw/ClickableTextdraw.java b/src/main/java/me/alf21/textdrawsystem/content/components/clickableTextdraw/ClickableTextdraw.java
new file mode 100644
index 0000000..b46b829
--- /dev/null
+++ b/src/main/java/me/alf21/textdrawsystem/content/components/clickableTextdraw/ClickableTextdraw.java
@@ -0,0 +1,129 @@
+package me.alf21.textdrawsystem.content.components.clickableTextdraw;
+
+import me.alf21.textdrawsystem.calculations.Calculation;
+import me.alf21.textdrawsystem.container.Container;
+import me.alf21.textdrawsystem.TextdrawSystem;
+import me.alf21.textdrawsystem.content.components.Component;
+import me.alf21.textdrawsystem.content.components.ComponentAlignment;
+import me.alf21.textdrawsystem.content.components.ComponentData;
+import me.alf21.textdrawsystem.utils.PlayerTextdraw;
+import net.gtaun.shoebill.constant.TextDrawAlign;
+import net.gtaun.shoebill.constant.TextDrawFont;
+import net.gtaun.shoebill.data.Color;
+import net.gtaun.shoebill.data.Vector2D;
+
+import java.util.ArrayList;
+
+/**
+ * Created by Alf21 on 14.07.2016 in the project 'textdraw-system'.
+ */
+public class ClickableTextdraw extends Component {
+	private PlayerTextdraw playerTextdraw;
+	private ClickableTextdrawHandler clickHandler;
+	private boolean clicked;
+
+	private ClickableTextdraw(Container container, float x, float y, float width, float height, Color color, String name) {
+		super(container, ComponentAlignment.TOP_LEFT, name);
+
+		playerTextdraw = PlayerTextdraw.create(super.getPlayer(), x, y, "_");
+		playerTextdraw.setAlignment(TextDrawAlign.get(2));
+		playerTextdraw.setBackgroundColor(new Color(0,0,0,255));
+		playerTextdraw.setFont(TextDrawFont.get(1));
+		playerTextdraw.setLetterSize(0.280000f, Calculation.heightToLetterHeight(height));
+		playerTextdraw.setOutlineSize(0);
+		playerTextdraw.setProportional(true);
+		playerTextdraw.setShadowSize(0);
+		playerTextdraw.setUseBox(true);
+		playerTextdraw.setBoxColor(color);
+	//	playerTextdraw.setTextSize(10.0f, width);
+		playerTextdraw.setHeight(height);
+		playerTextdraw.setWidth(width);
+		playerTextdraw.setSelectable(true);
+
+		clicked = false;
+	}
+
+	public static ClickableTextdraw create(Container container, float x, float y, float width, float height, Color color, String name) {
+		return new ClickableTextdraw(container, x, y, width, height, color, name);
+	}
+
+	@Override
+	public void destroy() {
+		playerTextdraw.destroy();
+		super.destroy();
+	}
+
+	@Override
+	public boolean isDestroyed() {
+		return !(!playerTextdraw.isDestroyed() || !super.isDestroyed());
+	}
+
+	@Override
+	public void recreate() {
+		super.recreate();
+		playerTextdraw.recreate();
+	}
+
+	@Override
+	public void show() {
+		super.show();
+		playerTextdraw.show();
+	}
+
+	@Override
+	public void hide() {
+		playerTextdraw.hide();
+		super.hide();
+	}
+
+	@Override
+	public ArrayList<PlayerTextdraw> getAllPlayerTextdraws() {
+		ArrayList<PlayerTextdraw> playerTextdraws = super.getAllPlayerTextdraws();
+		playerTextdraws.add(playerTextdraw);
+		return playerTextdraws;
+	}
+
+	@Override
+	public ArrayList<PlayerTextdraw> getComponentTextdraws() {
+		ArrayList<PlayerTextdraw> playerTextdraws = super.getComponentTextdraws();
+		playerTextdraws.add(playerTextdraw);
+		return playerTextdraws;
+	}
+
+	@Override
+	public void onClick(net.gtaun.shoebill.object.PlayerTextdraw playerTextdraw) {
+		if (clickHandler != null)
+			clickHandler.handle(this);
+		clicked = true;
+	}
+
+	public PlayerTextdraw getButtonTextdraw() {
+		return playerTextdraw;
+	}
+
+	@Override
+	public ComponentData getComponentData() {
+		return new ComponentData<>(clicked);
+	}
+
+	@Override
+	public Vector2D getComponentPosition() {
+		return playerTextdraw.getPosition();
+	}
+
+	public void setClickHandler(ClickableTextdrawHandler clickHandler) {
+		this.clickHandler = clickHandler;
+	}
+
+	public ClickableTextdrawHandler getClickHandler() {
+		return clickHandler;
+	}
+
+	public boolean isClicked() {
+		return clicked;
+	}
+
+	public void setClicked(boolean clicked) {
+		this.clicked = clicked;
+	}
+}
diff --git a/src/main/java/me/alf21/textdrawsystem/content/components/clickableTextdraw/ClickableTextdrawHandler.java b/src/main/java/me/alf21/textdrawsystem/content/components/clickableTextdraw/ClickableTextdrawHandler.java
new file mode 100644
index 0000000..cbd7493
--- /dev/null
+++ b/src/main/java/me/alf21/textdrawsystem/content/components/clickableTextdraw/ClickableTextdrawHandler.java
@@ -0,0 +1,9 @@
+package me.alf21.textdrawsystem.content.components.clickableTextdraw;
+
+/**
+ * Created by Alf21 on 14.07.2016 in the project 'textdraw-system'.
+ */
+@FunctionalInterface
+public interface ClickableTextdrawHandler {
+	void handle(ClickableTextdraw clickableTextdraw);
+}
diff --git a/src/main/java/me/alf21/textdrawsystem/content/components/input/Input.java b/src/main/java/me/alf21/textdrawsystem/content/components/input/Input.java
index d01fbaa..88110af 100644
--- a/src/main/java/me/alf21/textdrawsystem/content/components/input/Input.java
+++ b/src/main/java/me/alf21/textdrawsystem/content/components/input/Input.java
@@ -1,11 +1,12 @@
 package me.alf21.textdrawsystem.content.components.input;
 
-import me.alf21.textdrawsystem.container.Container;
 import me.alf21.textdrawsystem.TextdrawSystem;
+import me.alf21.textdrawsystem.container.Container;
 import me.alf21.textdrawsystem.content.components.Component;
 import me.alf21.textdrawsystem.content.components.ComponentAlignment;
 import me.alf21.textdrawsystem.content.components.ComponentData;
 import me.alf21.textdrawsystem.dialogs.Dialog;
+//import me.alf21.textdrawsystem.inputDialog.InputDialog;
 import me.alf21.textdrawsystem.utils.PlayerTextdraw;
 import net.gtaun.shoebill.common.dialog.InputDialog;
 import net.gtaun.shoebill.constant.TextDrawFont;
@@ -154,6 +155,7 @@ public class Input extends Component {
 				})
 				.build()
 				.show();
+		//TODO if is not needed a InputDialog (bcus of desc): Enter input without InputDialog direct into the input
 	}
 
 	@Override
diff --git a/src/main/java/me/alf21/textdrawsystem/dialogs/styles/DialogStyles.java b/src/main/java/me/alf21/textdrawsystem/dialogs/styles/DialogStyles.java
index 305ac08..0b94a42 100644
--- a/src/main/java/me/alf21/textdrawsystem/dialogs/styles/DialogStyles.java
+++ b/src/main/java/me/alf21/textdrawsystem/dialogs/styles/DialogStyles.java
@@ -1,12 +1,14 @@
 package me.alf21.textdrawsystem.dialogs.styles;
 
+import me.alf21.textdrawsystem.dialogs.styles.light.Light;
 import me.alf21.textdrawsystem.dialogs.styles.normal.Normal;
 
 /**
  * Created by Alf21 on 27.02.2016 in the project 'textdraw-system'.
  */
 public enum DialogStyles {
-	NORMAL(Normal.class);
+	NORMAL(Normal.class),
+	LIGHT(Light.class);
 
 	private Class<?> dialogStyle;
 
diff --git a/src/main/java/me/alf21/textdrawsystem/dialogs/styles/light/Light.java b/src/main/java/me/alf21/textdrawsystem/dialogs/styles/light/Light.java
new file mode 100644
index 0000000..b8e3cbb
--- /dev/null
+++ b/src/main/java/me/alf21/textdrawsystem/dialogs/styles/light/Light.java
@@ -0,0 +1,179 @@
+package me.alf21.textdrawsystem.dialogs.styles.light;
+
+import me.alf21.textdrawsystem.content.Content;
+import me.alf21.textdrawsystem.dialogs.Dialog;
+import me.alf21.textdrawsystem.dialogs.styles.DialogStyle;
+import me.alf21.textdrawsystem.dialogs.styles.Process;
+import me.alf21.textdrawsystem.dialogs.types.Panel;
+import me.alf21.textdrawsystem.utils.PlayerTextdraw;
+import net.gtaun.shoebill.constant.TextDrawAlign;
+import net.gtaun.shoebill.constant.TextDrawFont;
+import net.gtaun.shoebill.data.Color;
+import net.gtaun.shoebill.data.Vector2D;
+import net.gtaun.shoebill.object.Player;
+
+/**
+ * Created by Alf21 on 26.02.2016 in the project 'textdraw-system'.
+ */
+public class Light extends DialogStyle { //TODO usable for all dialog types -> getItemPosition! Calculation
+
+	@Override
+	public void create(Dialog dialog) {
+		Player player = dialog.getPlayer();
+
+		PlayerTextdraw panelBackground = PlayerTextdraw.create(player, 320.000000f, 140.000000f, "_");
+		panelBackground.setAlignment(TextDrawAlign.get(2));
+		panelBackground.setBackgroundColor(new Color(0, 0, 0, 255));
+		panelBackground.setFont(TextDrawFont.get(1));
+		panelBackground.setLetterSize(new Vector2D(0.500000f, 19.000000f));
+		panelBackground.setColor(new Color(255, 255, 255, 255));
+		panelBackground.setOutlineSize(0);
+		panelBackground.setProportional(true);
+		panelBackground.setShadowSize(1);
+		panelBackground.setUseBox(true);
+		panelBackground.setBoxColor(new Color(200, 200, 200, 120));
+		panelBackground.setTextSize(new Vector2D(0.000000f, 400.000000f));
+		panelBackground.setSelectable(false);
+
+		PlayerTextdraw title = PlayerTextdraw.create(player, 320.000000f, 125.000000f, "_");
+		title.setAlignment(TextDrawAlign.get(2));
+		title.setBackgroundColor(new Color(0, 0, 0, 255));
+		title.setFont(TextDrawFont.get(2));
+		title.setLetterSize(new Vector2D(0.239999f, 1.000000f));
+		title.setColor(new Color(255, 255, 255, 255));
+		title.setOutlineSize(1);
+		title.setProportional(true);
+		title.setUseBox(true);
+		title.setBoxColor(new Color(200, 200, 200, 120));
+		title.setTextSize(new Vector2D(0.000000f, 400.000000f));
+		title.setSelectable(false);
+
+		PlayerTextdraw titleBackground = PlayerTextdraw.create(player, 320.000000f, 140.000000f, "_");
+		titleBackground.setAlignment(TextDrawAlign.get(2));
+		titleBackground.setBackgroundColor(new Color(0, 0, 0, 255));
+		titleBackground.setFont(TextDrawFont.get(1));
+		titleBackground.setLetterSize(new Vector2D(0.500000f, 19.000000f));
+		titleBackground.setColor(new Color(255, 255, 255, 255));
+		titleBackground.setOutlineSize(0);
+		titleBackground.setProportional(true);
+		titleBackground.setShadowSize(1);
+		titleBackground.setUseBox(true);
+		titleBackground.setBoxColor(new Color(0, 0, 0, 100));
+		titleBackground.setTextSize(new Vector2D(0.000000f, 400.000000f));
+		titleBackground.setSelectable(false);
+
+		PlayerTextdraw leftButtonBackground = PlayerTextdraw.create(player, 148.000000f, 297.000000f, "_");
+		leftButtonBackground.setAlignment(TextDrawAlign.get(2));
+		leftButtonBackground.setBackgroundColor(new Color(0, 0, 0, 255));
+		leftButtonBackground.setFont(TextDrawFont.get(1));
+		leftButtonBackground.setLetterSize(new Vector2D(0.500000f, 0.999998f));
+		leftButtonBackground.setColor(new Color(255, 255, 255, 255));
+		leftButtonBackground.setOutlineSize(0);
+		leftButtonBackground.setProportional(true);
+		leftButtonBackground.setShadowSize(1);
+		leftButtonBackground.setUseBox(true);
+		leftButtonBackground.setBoxColor(new Color(40, 40, 40, 255));
+		leftButtonBackground.setTextSize(new Vector2D(0.000000f, 47.000000f));
+		leftButtonBackground.setSelectable(false);
+
+		PlayerTextdraw rightButtonBackground = PlayerTextdraw.create(player, 490.000000f, 296.000000f, "_");
+		rightButtonBackground.setAlignment(TextDrawAlign.get(2));
+		rightButtonBackground.setBackgroundColor(new Color(0, 0, 0, 255));
+		rightButtonBackground.setFont(TextDrawFont.get(1));
+		rightButtonBackground.setLetterSize(new Vector2D(0.500000f, 0.999999f));
+		rightButtonBackground.setColor(new Color(255, 255, 255, 255));
+		rightButtonBackground.setOutlineSize(0);
+		rightButtonBackground.setProportional(true);
+		rightButtonBackground.setShadowSize(1);
+		rightButtonBackground.setUseBox(true);
+		rightButtonBackground.setBoxColor(new Color(40, 40, 40, 255));
+		rightButtonBackground.setTextSize(new Vector2D(0.000000f, 50.000000f));
+		rightButtonBackground.setSelectable(false);
+
+		PlayerTextdraw leftButton = PlayerTextdraw.create(player, 148.000000f, 296.000000f, "LeftButton");
+		leftButton.setAlignment(TextDrawAlign.get(2));
+		leftButton.setBackgroundColor(new Color(0, 0, 0, 255));
+		leftButton.setFont(TextDrawFont.get(2));
+		leftButton.setLetterSize(new Vector2D(0.180000f, 1.000000f));
+		leftButton.setColor(new Color(255, 255, 255, 255));
+		leftButton.setUseBox(true);
+		leftButton.setBoxColor(new Color(0, 0, 0, 0));
+		leftButton.setTextSize(new Vector2D(10.000000f, 90.000000f));
+		leftButton.setOutlineSize(0);
+		leftButton.setProportional(true);
+		leftButton.setShadowSize(1);
+		leftButton.setSelectable(true);
+
+		PlayerTextdraw rightButton = PlayerTextdraw.create(player, 490.000000f, 295.000000f, "RightButton");
+		rightButton.setAlignment(TextDrawAlign.get(2));
+		rightButton.setBackgroundColor(new Color(0, 0, 0, 255));
+		rightButton.setFont(TextDrawFont.get(2));
+		rightButton.setLetterSize(new Vector2D(0.180000f, 1.000000f));
+		rightButton.setColor(new Color(255, 255, 255, 255));
+		rightButton.setOutlineSize(0);
+		rightButton.setProportional(true);
+		rightButton.setShadowSize(1);
+		rightButton.setUseBox(true);
+		rightButton.setBoxColor(new Color(0, 0, 0, 0));
+		rightButton.setTextSize(new Vector2D(10.000000f, 90.000000f));
+		rightButton.setSelectable(true);
+
+		PlayerTextdraw contentBackground = PlayerTextdraw.create(player, 320.000000f, 144.000000f, "_");
+		contentBackground.setAlignment(TextDrawAlign.get(2));
+		contentBackground.setBackgroundColor(new Color(0, 0, 0, 255));
+		contentBackground.setFont(TextDrawFont.get(1));
+		contentBackground.setLetterSize(new Vector2D(0.500000f, 16.000003f));
+		contentBackground.setColor(new Color(255, 255, 255, 255));
+		contentBackground.setOutlineSize(0);
+		contentBackground.setProportional(true);
+		contentBackground.setShadowSize(1);
+		contentBackground.setUseBox(true);
+		contentBackground.setBoxColor(new Color(40, 40, 40, 255));
+		contentBackground.setTextSize(new Vector2D(0.000000f, 390.000000f));
+		contentBackground.setSelectable(false);
+
+		PlayerTextdraw contentText = PlayerTextdraw.create(player, 130.000000f, 150.000000f, "_");
+		contentText.setBackgroundColor(new Color(0, 0, 0, 255));
+		contentText.setFont(TextDrawFont.get(1));
+		contentText.setLetterSize(new Vector2D(0.500000f, 1.000000f));
+		contentText.setColor(new Color(255, 255, 255, 255));
+		contentText.setOutlineSize(0);
+		contentText.setProportional(true);
+		contentText.setShadowSize(1);
+		contentText.setUseBox(true);
+		contentText.setBoxColor(new Color(0, 0, 0, 0));
+		contentText.setTextSize(new Vector2D(510.000000f, 0.000000f)); // TODO modify
+		contentText.setSelectable(false);
+
+		PlayerTextdraw closeIcon = PlayerTextdraw.create(player, 515.000000f, 125.000000f, "x");
+		closeIcon.setAlignment(TextDrawAlign.get(2));
+		closeIcon.setBackgroundColor(new Color(0, 0, 0, 255));
+		closeIcon.setFont(TextDrawFont.get(2));
+		closeIcon.setLetterSize(new Vector2D(0.300000f, 1.000000f));
+		closeIcon.setColor(new Color(255, 255, 255, 255));
+		closeIcon.setOutlineSize(0);
+		closeIcon.setProportional(true);
+		closeIcon.setShadowSize(0);
+		closeIcon.setUseBox(true);
+		closeIcon.setBoxColor(new Color(150, 0, 0, 255));
+		closeIcon.setTextSize(new Vector2D(10.000000f, 10.000000f));
+		closeIcon.setSelectable(true);
+
+		Process process = LightProcess.create(dialog);
+
+		dialog.setCloseIcon(closeIcon);
+		dialog.setContent(new Content(dialog, contentBackground, contentText));
+		dialog.setPanelBackground(panelBackground);
+		if (dialog instanceof Panel) {
+			((Panel) dialog).setLeftButton(leftButton);
+			((Panel) dialog).setLeftButtonBackground(leftButtonBackground);
+			((Panel) dialog).setRightButton(rightButton);
+			((Panel) dialog).setRightButtonBackground(rightButtonBackground);
+		}
+		dialog.setProcess(process);
+		dialog.setTitle(title);
+		dialog.setHoverColor(new Color(150,0,0,255));
+		dialog.setInputColor(new Color(255,255,255,50));
+		dialog.setMarkerColor(new Color(150,0,0,50));
+	}
+}
diff --git a/src/main/java/me/alf21/textdrawsystem/dialogs/styles/light/LightProcess.java b/src/main/java/me/alf21/textdrawsystem/dialogs/styles/light/LightProcess.java
new file mode 100644
index 0000000..b60ef32
--- /dev/null
+++ b/src/main/java/me/alf21/textdrawsystem/dialogs/styles/light/LightProcess.java
@@ -0,0 +1,141 @@
+package me.alf21.textdrawsystem.dialogs.styles.light;
+
+import me.alf21.textdrawsystem.calculations.Calculation;
+import me.alf21.textdrawsystem.dialogs.Dialog;
+import me.alf21.textdrawsystem.dialogs.styles.Process;
+import me.alf21.textdrawsystem.utils.PlayerTextdraw;
+import net.gtaun.shoebill.constant.TextDrawAlign;
+import net.gtaun.shoebill.constant.TextDrawFont;
+import net.gtaun.shoebill.data.Color;
+import net.gtaun.shoebill.data.Vector2D;
+import net.gtaun.shoebill.object.Destroyable;
+
+/**
+ * Created by Alf21 on 26.02.2016 in the project 'textdraw-system'.
+ */
+public class LightProcess extends Process implements Destroyable {
+	private static PlayerTextdraw processBarBackground;
+	private static PlayerTextdraw processBar;
+	private double process, maxProcess;
+	private boolean showed;
+
+	private static float max_width = 400.000000f;
+
+	private LightProcess(Dialog dialog) {
+		super(dialog);
+
+		processBarBackground = PlayerTextdraw.create(dialog.getPlayer(), 320.000000f, 138.000000f, "_");
+		processBarBackground.setAlignment(TextDrawAlign.get(2));
+		processBarBackground.setBackgroundColor(new Color(0, 0, 0, 255));
+		processBarBackground.setFont(TextDrawFont.get(1));
+		processBarBackground.setLetterSize(new Vector2D(0.500000f, -0.300000f));
+		processBarBackground.setColor(new Color(255, 255, 255, 255));
+		processBarBackground.setOutlineSize(0);
+		processBarBackground.setProportional(true);
+		processBarBackground.setShadowSize(1);
+		processBarBackground.setUseBox(true);
+		processBarBackground.setBoxColor(new Color(255, 255, 255, 50));
+		processBarBackground.setTextSize(new Vector2D(0.000000f, max_width));
+		processBarBackground.setSelectable(false);
+
+		processBar = PlayerTextdraw.create(dialog.getPlayer(), 320.000000f, 138.000000f, "_");
+		processBar.setAlignment(TextDrawAlign.get(2));
+		processBar.setBackgroundColor(new Color(0, 0, 0, 255));
+		processBar.setFont(TextDrawFont.get(1));
+		processBar.setLetterSize(new Vector2D(0.500000f, -0.300000f));
+		processBar.setColor(new Color(255, 255, 255, 255));
+		processBar.setOutlineSize(0);
+		processBar.setProportional(true);
+		processBar.setShadowSize(1);
+		processBar.setUseBox(true);
+		processBar.setBoxColor(new Color(150, 0, 0, 255));
+		processBar.setTextSize(new Vector2D(0.000000f, max_width));
+		processBar.setSelectable(false);
+	} //TODO REMOVE THIS CLASS AND USE Bar.class AS CONTENT COMPONENT
+
+	public static Process create(Dialog dialog) {
+		return new LightProcess(dialog);
+	}
+
+	@Override
+	public void show() {
+		showed = true;
+		super.show();
+		processBarBackground.show();
+		processBar.show();
+	}
+
+	@Override
+	public void process() {
+		if (isShowed()) {
+			super.process();
+			hide();
+			processBar.setTextSize(new Vector2D(0, max_width));
+			Vector2D textSize = Calculation.getWidth(processBar, maxProcess, process);
+			processBar.setTextSize(textSize);
+			show();
+		}
+	}
+
+	@Override
+	public double getProcess() {
+		return process;
+	}
+
+	@Override
+	public double getMaxProcess() {
+		return maxProcess;
+	}
+
+	@Override
+	public void hide() {
+		showed = false;
+		super.hide();
+		processBar.hide();
+		processBarBackground.hide();
+	}
+
+	@Override
+	public void recreate() {
+		super.recreate();
+		processBar.recreate();
+		processBarBackground.recreate();
+	}
+
+	@Override
+	public void setProcess(double process) {
+		this.process = process;
+	}
+
+	@Override
+	public void setMaxProcess(double maxProcess) {
+		this.maxProcess = maxProcess;
+	}
+
+	@Override
+	public void start() { //TODO for timer
+		super.start();
+	}
+
+	@Override
+	public void stop() {
+		super.stop();
+	}
+
+	@Override
+	public void destroy() {
+		super.destroy();
+		hide();
+		processBarBackground.destroy();
+		processBar.destroy();
+	}
+
+	@Override
+	public boolean isDestroyed() {
+		return !(!super.isDestroyed() || !processBarBackground.isDestroyed() || !processBar.isDestroyed());
+	}
+
+	public boolean isShowed() {
+		return showed;
+	}
+}
diff --git a/src/main/java/me/alf21/textdrawsystem/dialogs/styles/normal/NormalProcess.java b/src/main/java/me/alf21/textdrawsystem/dialogs/styles/normal/NormalProcess.java
index daebf18..1bcd166 100644
--- a/src/main/java/me/alf21/textdrawsystem/dialogs/styles/normal/NormalProcess.java
+++ b/src/main/java/me/alf21/textdrawsystem/dialogs/styles/normal/NormalProcess.java
@@ -23,9 +23,7 @@ public class NormalProcess extends Process implements Destroyable {
 
 	private NormalProcess(Dialog dialog) {
 		super(dialog);
-	} //TODO REMOVE THIS CLASS AND USE Bar.class AS CONTENT COMPONENT
 
-	public static Process create(Dialog dialog) {
 		processBarBackground = PlayerTextdraw.create(dialog.getPlayer(), 320.000000f, 133.500000f, "_");
 		processBarBackground.setAlignment(TextDrawAlign.get(2));
 		processBarBackground.setBackgroundColor(new Color(0, 0, 0, 255));
@@ -53,7 +51,9 @@ public class NormalProcess extends Process implements Destroyable {
 		processBar.setBoxColor(new Color(0, 255, 0, 255));
 		processBar.setTextSize(new Vector2D(0.000000f, max_width));
 		processBar.setSelectable(false);
+	} //TODO REMOVE THIS CLASS AND USE Bar.class AS CONTENT COMPONENT
 
+	public static Process create(Dialog dialog) {
 		return new NormalProcess(dialog);
 	}
 
diff --git a/src/main/java/me/alf21/textdrawsystem/dialogs/types/Panel.java b/src/main/java/me/alf21/textdrawsystem/dialogs/types/Panel.java
index 3536f63..ef69dec 100644
--- a/src/main/java/me/alf21/textdrawsystem/dialogs/types/Panel.java
+++ b/src/main/java/me/alf21/textdrawsystem/dialogs/types/Panel.java
@@ -30,6 +30,10 @@ public class Panel extends Dialog {
 		return new Panel(player, dialogStyles, dialogInterface);
 	}
 
+	public static Panel create(Player player, DialogStyles dialogStyles) {
+		return new Panel(player, dialogStyles, null);
+	}
+
 	public static Panel create(Player player, DialogInterface dialogInterface) {
 		return new Panel(player, null, dialogInterface);
 	}
diff --git a/src/main/java/me/alf21/textdrawsystem/panelDialog/AbstractPanelDialog.java b/src/main/java/me/alf21/textdrawsystem/panelDialog/AbstractPanelDialog.java
index 247f5f0..f416c5d 100644
--- a/src/main/java/me/alf21/textdrawsystem/panelDialog/AbstractPanelDialog.java
+++ b/src/main/java/me/alf21/textdrawsystem/panelDialog/AbstractPanelDialog.java
@@ -22,6 +22,7 @@ import me.alf21.textdrawsystem.content.components.ComponentDataCollection;
 import me.alf21.textdrawsystem.content.components.bar.Bar;
 import me.alf21.textdrawsystem.content.components.bar.BarInterface;
 import me.alf21.textdrawsystem.content.components.button.Button;
+import me.alf21.textdrawsystem.content.components.clickableTextdraw.ClickableTextdraw;
 import me.alf21.textdrawsystem.content.components.input.Input;
 import me.alf21.textdrawsystem.content.components.input.InputType;
 import me.alf21.textdrawsystem.content.components.list.List;
@@ -313,7 +314,7 @@ public abstract class AbstractPanelDialog implements Destroyable {
             components.add(bar);
     }
 
-    public void addButton(Button button) {
+    public void addButton(ClickableTextdraw button) {
         if (!components.contains(button))
             components.add(button);
     }
@@ -360,6 +361,12 @@ public abstract class AbstractPanelDialog implements Destroyable {
         return bar;
     }
 
+    public ClickableTextdraw createClickableTextdraw(float x, float y, float width, float height, Color color, String name) {
+        ClickableTextdraw clickableTextdraw = ClickableTextdraw.create(panel.getContent(), x, y, width, height, color, name);
+        getComponents().add(clickableTextdraw);
+        return clickableTextdraw;
+    }
+
     public Button createButton(float x, float y, String text, String name) {
         Button button = Button.create(panel.getContent(), x, y, text, name);
         getComponents().add(button);
diff --git a/src/main/java/me/alf21/textdrawsystem/player/PlayerData.java b/src/main/java/me/alf21/textdrawsystem/player/PlayerData.java
index 2e945b2..a84d52a 100644
--- a/src/main/java/me/alf21/textdrawsystem/player/PlayerData.java
+++ b/src/main/java/me/alf21/textdrawsystem/player/PlayerData.java
@@ -1,9 +1,9 @@
 package me.alf21.textdrawsystem.player;
 
-import me.alf21.textdrawsystem.container.Container;
-import me.alf21.textdrawsystem.msgBox.MsgBox;
 import me.alf21.textdrawsystem.TextdrawSystem;
+import me.alf21.textdrawsystem.container.Container;
 import me.alf21.textdrawsystem.dialogs.types.Panel;
+import me.alf21.textdrawsystem.msgBox.MsgBox;
 import me.alf21.textdrawsystem.utils.PlayerTextdrawData;
 import net.gtaun.shoebill.common.player.PlayerLifecycleObject;
 import net.gtaun.shoebill.data.Color;
diff --git a/src/main/java/me/alf21/textdrawsystem/player/PlayerManager.java b/src/main/java/me/alf21/textdrawsystem/player/PlayerManager.java
index 57ad8ba..2355128 100644
--- a/src/main/java/me/alf21/textdrawsystem/player/PlayerManager.java
+++ b/src/main/java/me/alf21/textdrawsystem/player/PlayerManager.java
@@ -1,20 +1,23 @@
 package me.alf21.textdrawsystem.player;
 
-import java.io.IOException;
-
-import me.alf21.textdrawsystem.msgBox.MsgBox;
 import me.alf21.textdrawsystem.TextdrawSystem;
 import me.alf21.textdrawsystem.container.Container;
-import me.alf21.textdrawsystem.dialogs.types.Panel;
 import me.alf21.textdrawsystem.content.components.Component;
+import me.alf21.textdrawsystem.dialogs.types.Panel;
+import me.alf21.textdrawsystem.msgBox.MsgBox;
 import me.alf21.textdrawsystem.utils.PlayerTextdraw;
 import me.alf21.textdrawsystem.utils.PlayerTextdrawData;
 import net.gtaun.shoebill.constant.PlayerKey;
-import net.gtaun.shoebill.event.player.*;
+import net.gtaun.shoebill.event.player.PlayerClickPlayerTextDrawEvent;
+import net.gtaun.shoebill.event.player.PlayerClickTextDrawEvent;
+import net.gtaun.shoebill.event.player.PlayerDisconnectEvent;
+import net.gtaun.shoebill.event.player.PlayerKeyStateChangeEvent;
 import net.gtaun.shoebill.object.Player;
 import net.gtaun.util.event.EventManager;
 import net.gtaun.util.event.HandlerPriority;
 
+import java.io.IOException;
+
 /**
  * Created by Alf21 on 26.02.2016 in the project 'textdraw-system'.
  */
diff --git a/src/main/java/me/alf21/textdrawsystem/utils/PlayerTextdrawContainer.java b/src/main/java/me/alf21/textdrawsystem/utils/PlayerTextdrawContainer.java
new file mode 100644
index 0000000..e0404a8
--- /dev/null
+++ b/src/main/java/me/alf21/textdrawsystem/utils/PlayerTextdrawContainer.java
@@ -0,0 +1,58 @@
+package me.alf21.textdrawsystem.utils;
+
+import net.gtaun.shoebill.object.Destroyable;
+import net.gtaun.shoebill.object.Player;
+
+import java.util.ArrayList;
+
+/**
+ * Created by Alf21 on 21.07.2016 in the project 'textdraw-system'.
+ */
+public class PlayerTextdrawContainer implements Destroyable {
+
+	private Player player;
+	private ArrayList<PlayerTextdraw> playerTextdraws;
+
+	protected PlayerTextdrawContainer(Player player) {
+		this.player = player;
+		playerTextdraws = new ArrayList<>();
+	}
+
+
+	public void show() {
+		playerTextdraws.forEach(PlayerTextdraw::show);
+	}
+
+	public void hide() {
+		playerTextdraws.forEach(PlayerTextdraw::hide);
+	}
+
+	public void recreate() {
+		playerTextdraws.forEach(PlayerTextdraw::recreate);
+	}
+
+	@Override
+	public void destroy() {
+		playerTextdraws.forEach(PlayerTextdraw::destroy);
+	}
+
+	@Override
+	public boolean isDestroyed() {
+		for (PlayerTextdraw playerTextdraw : playerTextdraws)
+			if (!playerTextdraw.isDestroyed())
+				return false;
+		return true;
+	}
+
+	public ArrayList<PlayerTextdraw> getPlayerTextdraws() {
+		return playerTextdraws;
+	}
+
+	public void setPlayerTextdraws(ArrayList<PlayerTextdraw> playerTextdraws) {
+		this.playerTextdraws = playerTextdraws;
+	}
+
+	public Player getPlayer() {
+		return player;
+	}
+}
diff --git a/src/main/java/me/alf21/textdrawsystem/utils/PlayersTextdrawContainer.java b/src/main/java/me/alf21/textdrawsystem/utils/PlayersTextdrawContainer.java
new file mode 100644
index 0000000..971a9b3
--- /dev/null
+++ b/src/main/java/me/alf21/textdrawsystem/utils/PlayersTextdrawContainer.java
@@ -0,0 +1,58 @@
+package me.alf21.textdrawsystem.utils;
+
+import net.gtaun.shoebill.object.Destroyable;
+import net.gtaun.shoebill.object.Player;
+
+import java.util.ArrayList;
+
+/**
+ * Created by Alf21 on 21.07.2016 in the project 'textdraw-system'.
+ */
+public class PlayersTextdrawContainer implements Destroyable {
+
+	private Player player;
+	private ArrayList<PlayersTextdraw> playersTextdraws;
+
+	protected PlayersTextdrawContainer(Player player) {
+		this.player = player;
+		playersTextdraws = new ArrayList<>();
+	}
+
+
+	public void show() {
+		playersTextdraws.forEach(PlayersTextdraw::show);
+	}
+
+	public void hide() {
+		playersTextdraws.forEach(PlayersTextdraw::hide);
+	}
+
+	public void recreate() {
+		playersTextdraws.forEach(PlayersTextdraw::recreate);
+	}
+
+	@Override
+	public void destroy() {
+		playersTextdraws.forEach(PlayersTextdraw::destroy);
+	}
+
+	@Override
+	public boolean isDestroyed() {
+		for (PlayersTextdraw playersTextdraw : playersTextdraws)
+			if (!playersTextdraw.isDestroyed())
+				return false;
+		return true;
+	}
+
+	public ArrayList<PlayersTextdraw> getPlayersTextdraws() {
+		return playersTextdraws;
+	}
+
+	public void setPlayerTextdraws(ArrayList<PlayersTextdraw> playersTextdraws) {
+		this.playersTextdraws = playersTextdraws;
+	}
+
+	public Player getPlayer() {
+		return player;
+	}
+}
-- 
1.9.5.msysgit.0

